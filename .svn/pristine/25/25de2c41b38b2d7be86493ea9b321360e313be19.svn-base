package com.seoulit.erp.account.slip.service;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;

import com.seoulit.erp.account.slip.dao.JournalDAO;
import com.seoulit.erp.account.slip.dao.SlipDAO;
import com.seoulit.erp.account.slip.repository.JournalDetailRepository;
import com.seoulit.erp.account.slip.repository.JournalRepository;
import com.seoulit.erp.account.slip.repository.SlipRepository;
import com.seoulit.erp.account.slip.to.AccountControlDetailTO;
import com.seoulit.erp.account.slip.to.JournalDetailTO;
import com.seoulit.erp.account.slip.to.JournalTO;
import com.seoulit.erp.account.slip.to.SlipTO;

@Service
public class SlipServiceFacadeImpl implements SlipServiceFacade{
	@Autowired
	private SlipRepository slipRepository;
	@Autowired
	private JournalRepository journalRepository;
	@Autowired
	private JournalDetailRepository journalDetailRepository;
	
	@Autowired
	private SlipDAO slipDAO;
	@Autowired
	private JournalDAO journalDAO;

	//전표번호
	@Override
	public List<SlipTO> addNewSlipNo(String strDate) {
		List<SlipTO> addNewSlipNo=slipDAO.addNewSlipNo(strDate);
		return addNewSlipNo;
	}
	
	
	@Override
	public List<SlipTO> getSlipTotalList(String startDate, String endDate) throws DataAccessException {
		Map<String,Object> map=new HashMap<>();
		map.put("startDate", startDate);
		map.put("endDate", endDate);
		List<SlipTO> slip=slipDAO.getSlipTotalList(map);
		return slip;
	}

	@Override
	public List<SlipTO> getSlipList(String startDate, String endDate, String slipStatus) {
		Map<String,Object> map=new HashMap<>();
			map.put("startDate", startDate);
			map.put("endDate", endDate);
			map.put("slipStatus", slipStatus);
			
		return slipDAO.getSlipList(map);
	}

	@Override
	public int getSlipRowCount(String reportingDate) {

		return slipDAO.getSlipRowCount(reportingDate);
	}
	
	@Override
	public int getJournalRowCount(String slipNo) {
		// TODO Auto-generated method stub
		return journalDAO.getJournalRowCount(slipNo);
	}

	@Override
	public SlipTO batchSlipInfo(SlipTO slipTo) {		
		
		SlipTO newSlipTO = slipRepository.save(slipTo);
		
//		switch (slipTo.getStatus()) {
//		case "insert":
//			slipDAO.insertSlipInfo(slipTo);
//			break;
//		case "delete":
//			slipRepository.delete(slipTo);
//			
//			break;
//		case "update":
//			slipRepository.save(slipTo);
//			break;
//		}
		return newSlipTO;
		
	}
	

	@Override
	public List<JournalTO> getJournalListForSlip(String slipNo) {		
		
		return journalRepository.findBySlipNo(slipNo);
		
	}

	@Override
	public void batchJournalInfo(JournalTO journalTo) {
	
		switch (journalTo.getStatus()) {
		case "insert":
			journalRepository.save(journalTo);
			break;
		case "delete":
			journalRepository.delete(journalTo);
			break;
		case "update":
			journalRepository.save(journalTo);
			break;
		}
	}

	@Override
	public List<JournalTO> getJournalList(String startDate, String endDate) {
		
		Map<String, Object> map = new HashMap<String, Object>();
	    map.put("startDate", startDate);
	    map.put("endDate", endDate);
		
	    return journalRepository.findBySlipApprovalDateBetween(startDate, endDate);		 
	}

	@Override
	public List<JournalDetailTO> getJournalDetailList(String journalNo) throws DataAccessException {
		
		return journalDetailRepository.findByJournalNo(journalNo);		
	}

	@Override
	public List<AccountControlDetailTO> getAccountControlDetailList(String accountCode) throws DataAccessException {
		
		return journalDAO.getAccountControlDetailList(accountCode);		
	}

	@Override
	public void batchJournalDetailInfo(JournalDetailTO journalDetailTO) {
		switch (journalDetailTO.getStatus()) {
		case "insert":
			journalDAO.insertJournalDetailInfo(journalDetailTO);
			break;
		case "delete":
			journalDAO.deleteJournalDetailInfo(journalDetailTO);
			break;
		case "update":
			journalDAO.updateJournalDetailInfo(journalDetailTO);
			break;
		}
	
	}

	@Override
	public void updateDifference(String accountDifference, String slipNo) {
		HashMap<String, String> map = new HashMap<>();
		map.put("slipNo", slipNo);
		map.put("accountDifference", accountDifference);
		
		slipDAO.updateDifference(map);
	}

}
