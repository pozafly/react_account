import React, { useState, useEffect } from 'react';

import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/dist/styles/ag-grid.css";
import "ag-grid-community/dist/styles/ag-theme-balham.css";

import accountApi from '../../../../../api/axios/accountApi';
import AccountDialog from './Dialogs/AccountDialog';
import BalanceDialog from './Dialogs/BalanceDialog';
import CustomerDialog from './Dialogs/CustomerDialog'

import { makeStyles } from "@material-ui/core";
import Paper from "@material-ui/core/Paper";
import Typography from "@material-ui/core/Typography";
import AppBar from "@material-ui/core/AppBar";
import Toolbar from "@material-ui/core/Toolbar";
import Button from '@material-ui/core/Button';

import { AllCommunityModules } from "ag-grid-community";


const JournalGrid = ({ slipNo, flag, today }) => {

    //========================== 그리드 객체 준비 ==========================
    const [gridApi, setGridApi] = useState();
    const [columnApi, setColumnApi] = useState();

    const onGridReady = params => {
        setGridApi(params.api);
        setColumnApi(params.columnApi);
        params.api.sizeColumnsToFit();
    };

    const classes = useStyles();

    const [data, setData] = useState('');
    let [journalNo, setJournalNo] = useState('');
    const [nodeId, setNodeId] = useState();

    //========================== 그리드초기화 ==========================
    const initalBtn = () => {
        gridApi.selectAll();
        const allData = gridApi.getSelectedRows();
        gridApi.updateRowData({ remove: allData });
    };

    //========================== 분개조회 ==========================
    useEffect(() => {
        async function getJournalListForSlip() {
            const response = await accountApi.get('/slip/getJournalListForSlip', {
                params: {
                    slipNo: slipNo
                }
            });
            setData(response.data);
        };
        getJournalListForSlip();
    }, [slipNo]);


    //========================== 분개추가 ==========================
    useEffect(() => {
        async function getJournalRowCount() {
            const response = await accountApi.get('/slip/getJournalRowCount', {
                params: {
                    slipNo: slipNo
                }
            });
            setJournalNo(response.data);
        };
        getJournalRowCount();
    }, []);

    const addBtn = () => {
        ++journalNo;
        const newItem = createNewRowData();
        gridApi.updateRowData({ add: [newItem] });
    }
    const createNewRowData = () => {
        let newData = {
            journalNo: `${slipNo}JOURNAL0${journalNo}`,
            slipNo: slipNo,
            leftDebtorPrice: 0,
            rightCreditsPrice: 0,
            summaryNumber: 0,
        };
        return newData;
    };


    //========================== 분개그리드 클릭 이벤트 ==========================
    const [accountDialogOpen, setAccountDialogOpen] = useState(false);
    const [accountValue, setAccountValue] = useState('');
    const [balanceDialogOpen, setBalanceDialogOpen] = useState(false);
    const [balanceValue, setBalanceValue] = useState('');
    const [customerDialogOpen, setCustomerDialogOpen] = useState(false);
    const [customerValue, setCustomerValue] = useState('');

    const handleClose = value => {
        if (value.division === 'accountDialog') {
            setAccountDialogOpen(false);
            setAccountValue(value.data);
        } else if (value.division === 'balanceDialog') {
            setBalanceDialogOpen(false);
            setBalanceValue(value.data);
        } else if (value.division === 'customerDialog') {
            setCustomerDialogOpen(false);
            setCustomerValue(value.data);
        }
    };

    useEffect(() => {
        if (accountValue[0] !== undefined) {
            let itemsToUpdate = [];
            gridApi.forEachNodeAfterFilterAndSort(function (rowNode, index) {
                if (index !== nodeId) {
                    return;
                }
                let accountData = rowNode.data;
                accountData.accountInnerCode = accountValue[0].accountCode;
                accountData.accountName = accountValue[0].accountName;
                itemsToUpdate.push(accountData);
            });
            gridApi.updateRowData({ update: itemsToUpdate });
        };
    }, [accountValue]);

    useEffect(() => {
        if (balanceValue) {
            let itemsToUpdate = [];
            gridApi.forEachNodeAfterFilterAndSort(function (rowNode, index) {
                if (index !== nodeId) {
                    return;
                }
                let balanceData = rowNode.data;
                balanceData.balanceDivision = balanceValue;
                itemsToUpdate.push(balanceData);
            });
            gridApi.updateRowData({ update: itemsToUpdate });
        };
    }, [balanceValue]);

    useEffect(() => {
        if (customerValue) {
            let itemsToUpdate = [];
            gridApi.forEachNodeAfterFilterAndSort(function (rowNode, index) {
                if (index !== nodeId) {
                    return;
                }
                let customerData = rowNode.data;
                customerData.customerCode = customerValue[0].customerCode;
                customerData.customerName = customerValue[0].customerName;
                itemsToUpdate.push(customerData);
            });
            gridApi.updateRowData({ update: itemsToUpdate });
        };
    }, [customerValue]);

    const onCellClicked = id => {

        if (id.colDef.field === 'accountInnerCode' || id.colDef.field === 'accountName') {
            setAccountDialogOpen(true);
            setNodeId(id.rowIndex);
        } else if (id.colDef.field === 'balanceDivision') {
            setBalanceDialogOpen(true);
            setNodeId(id.rowIndex);
        } else if (id.colDef.field === 'customerCode' || id.colDef.field === 'customerName') {
            setCustomerDialogOpen(true);
            setNodeId(id.rowIndex);
        }
    };

    //========================== 분개삭제 ==========================
    const deleteBtn = () => {
        const selectedData = gridApi.getSelectedRows();
        if (selectedData.length === 0) {
            alert('삭제할거 선택해라');
        } else {
            gridApi.updateRowData({ remove: selectedData });
        }
    };

    //========================== 분개저장 ==========================
    const saveBtn = async () => {
        if (gridApi.getSelectedRows()[0] !== undefined) {
            let batchArray = gridApi.getSelectedRows();
            let lPrice;
            let rPrice;
            for (let i = 0; i < batchArray.length; i++) {
                if (batchArray[i].balanceDivision === '차변') {
                    batchArray[i].leftDebtorPrice = batchArray[i].price;
                    lPrice = batchArray[i].price;
                } else if (batchArray[i].balanceDivision === '대변') {
                    batchArray[i].rightCreditsPrice = batchArray[i].price;
                    rPrice = batchArray[i].price;
                }
            }
            console.log('lPrice : ' + lPrice);
            console.log('rPrice : ' + rPrice);
            if (lPrice - rPrice === 0) {
                const response = await accountApi.put('/slip/batchJournalInfo', batchArray);
                await accountApi.post(`/slip/updateDifference?slipNo=${slipNo}`);
                const newData = [];
                response.data.forEach(element => {
                    newData.push(element.journalNo);
                });
                alert(`분개번호 [${newData}]가 저장되었습니다.`);
            } else {
                alert('차변과 대변의 금액이 맞지 않습니다. 다시 작성해주세요.');
            }
        } else {
            alert('선택된 분개가 없습니다.');
        }
    };


    //========================== 그리드내용 ==========================
    const accountColumnDefs = [
        { headerName: '', field: 'check', width: 50, checkboxSelection: true },
        { headerName: "분개일련번호", field: "journalNo", width: 230 },
        { headerName: "계정코드", field: "accountInnerCode", width: 100 },
        { headerName: "계정명", field: "accountName", width: 130 },
        { headerName: "대차구분", field: "balanceDivision", width: 100 },
        { headerName: "적요", field: "summaryComment", width: 230, editable: true },
        { headerName: "거래처코드", field: "customerCode", width: 110 },
        { headerName: "거래처명", field: "customerName", width: 110 },
        { headerName: "금액", field: "price", width: 110, editable: true, valueFormatter: currencyFormatter },
        { headerName: "전표번호", field: "slipNo", width: 110, hide: true },
        { headerName: "차변", field: "leftDebtorPrice", width: 110, hide: true },
        { headerName: "대변", field: "rightCreditsPrice", width: 110, hide: true },
        { headerName: "적요번호", field: "summaryNumber", width: 110, hide: true },
    ];

    //========================== 통화표시 포매터 ==========================
    function currencyFormatter(params) {
        return "￦" + formatNumber(params.value);
    };
    function formatNumber(number) {
        return Math.floor(number)
            .toString()
            .replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    };


    //==============================================================================
    return (
        <div>
            <Paper className={classes.paper}>
                <div className={classes.root} style={{ width: '30%', float: 'left' }}>
                    <Button variant="contained" color="primary" onClick={initalBtn}>
                        그리드초기화
                    </Button>
                </div>
                <div className={classes.root} style={{ width: '27%', float: 'right' }}>
                    <Button variant="contained" color="primary" disabled={flag} onClick={addBtn}>
                        분개추가
                    </Button>
                    <Button variant="contained" color="primary" disabled={flag} onClick={deleteBtn}>
                        분개삭제
                    </Button>
                    <Button variant="contained" color="primary" disabled={flag} onClick={saveBtn}>
                        분개저장
                    </Button>
                </div>
                <AppBar position="relative" className={classes.subCategory}>
                    <Toolbar>
                        <Typography variant="h5">분개</Typography>
                    </Toolbar>
                </AppBar>
                <div
                    className={"ag-theme-balham"}
                    style={{
                        height: "200px",
                        width: "100%",
                        paddingTop: "20px"
                    }}>
                    <AgGridReact
                        columnDefs={accountColumnDefs}
                        rowData={data}
                        rowSelection='multiple'
                        onGridReady={onGridReady}
                        onCellClicked={onCellClicked}
                        modules={AllCommunityModules}
                    />
                </div>
                <br />
            </Paper>
            <AccountDialog open={accountDialogOpen} onClose={handleClose} />
            <BalanceDialog open={balanceDialogOpen} onClose={handleClose} />
            <CustomerDialog open={customerDialogOpen} onClose={handleClose} />
        </div>
    );
};

const useStyles = makeStyles(theme => ({
    paper: {
        padding: theme.spacing(1),
        height: 330,
        width: 1190
    },
    subCategory: {
        background: "#232f3e",
        color: "white"
    },
    root: {
        '& > *': {
            margin: theme.spacing(1),
        },
    },
}));

export default JournalGrid;